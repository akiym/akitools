#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw/:config posix_default no_ignore_case bundling permute/;

my $RE_REGISTER = qr/((?:r(?:1(?:0[dlw]?|1[dlw]?|2[dlw]?|3[dlw]?|4[dlw]?|5[dlw]?)|8[dlw]?|9[dlw]?|[ac]x|b[px]|d[ix]|s[ip])|e(?:[ac]x|b[px]|d[ix]|s[ip])|b(?:[hlx]|pl?)|d(?:[hlx]|il?)|s(?:il?|pl?)|a[hlx]|c[hlx]))/;

my %opt = (
    rop    => 5,
    unique => 0,
);
GetOptions(
    'r|rop=s'   => \$opt{rop},
    'u|unique!' => \$opt{unique},
    'carop'     => \my $carop,
    's|style'   => \my $style,
) or usage();
$opt{file} = shift or usage();

my @args;
for my $key (sort keys %opt) {
    if (defined $opt{$key}) {
        if ($key eq 'unique') {
            if (!$opt{$key}) {
                push @args, "--$key";
            }
        } else {
            push @args, "--$key=$opt{$key}";
        }
    }
}
my $cmd_args = join ' ', @args;
my $out = `rp-lin-x86 $cmd_args`;

my @gadgets;
while ($out =~ /\033\[91m0x([0-9a-f]+)\033\[0m:\s+\033\[92m(.+)\s+\(.+\)/gm) {
    my $addr = $1;
    my @op = split /\s+;\s+/, $2;
    if ($op[-1] eq 'ret') {
        if (@op == 1) {
            push @gadgets, sprintf 'ret = 0x%x', hex($addr);
        } elsif (@op == 2) {
            if ($op[0] eq 'leave') {
                push @gadgets, sprintf 'leaveret = 0x%x', hex($addr);
            } elsif ($op[0] =~ /(inc|dec) $RE_REGISTER/) {
                push @gadgets, sprintf '%s_%s = 0x%x', $1, $2, hex($addr);
            } elsif ($op[0] =~ /(add|sub|xor) $RE_REGISTER, $RE_REGISTER/) {
                push @gadgets, sprintf '%s_%s_%s = 0x%x', $1, $2, $3, hex($addr);
            } elsif ($op[0] =~ /(add|sub) ([re][sb]p), [qd]word \[([re][sb]p)([+-])0x([0-9A-F]+)\]/) {
                push @gadgets, sprintf '%s_%s_%s%s%s = 0x%x', $1, $2, $3, ($4 eq '-' ? 'N' : ''), hex($5), hex($addr);
            } elsif ($carop && $op[0] =~ /add [qd]word \[([re](?:[sb]p|bx))([+-])0x([0-9A-F]+)\], $RE_REGISTER/) {
                push @gadgets, sprintf 'add_%s_%sx%s_%s = 0x%x # carop gadget', $1, ($2 eq '-' ? 'N' : ''), $3, $4, hex($addr);
            }
        }

        # pop xxx; pop xxx; ...
        my @reg;
        for my $i (0..@op-2) {
            if ($op[$i] =~ /pop $RE_REGISTER/) {
                push @reg, $1;
            } else {
                last;
            }
            if ($i == @op-2) {
                if ($style) {
                    push @gadgets, sprintf 'pop%sret = 0x%x', (scalar @reg > 1 ? scalar @reg : ''), hex($addr);
                } else {
                    push @gadgets, sprintf 'pop_%s = 0x%x', join('_', @reg), hex($addr);
                }
            }
        }
    }
}

print join("\n", sort @gadgets) . "\n";

sub usage {
    die "Usage: $0 FILE\n";
}
